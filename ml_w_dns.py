#!/usr/bin/env python
#-*- coding: UTF-8 -*-
"""
	Web Page - DNS

	Configuration Data Format
	{
		"hostname": "abc",
		"domain-name": "def",
		"dns-server-1": "1.2.3.4",
		"dns-server-2": "5.6.7.8"
	}
"""
import os
import ml_system
import ml_config
import ml_jcfg

default = {
		"hostname": "SLB",
		"domain-name": "",
		"dns-server-1": "",
		"dns-server-2": ""
}

class dns(ml_config.base):
	""" DNS """
	def __init__(self, fpath = os.path.join(ml_system.CFG_PATH, "dns.txt"), threadlock = None):
		""" init config """
		super(dns, self).__init__(fpath, threadlock)
		self.tag = "dns"
		self.default = default
		self.main_syntax = {
			"hostname": {'T':str, 'D':"", 'M':True, 'S':None}, 
			"domain-name": {'T':str, 'D':"", 'M':True, 'S':None}, 
			"dns-server-1": {'T':str, 'D':"", 'M':True, 'S':None}, 
			"dns-server-2": {'T':str, 'D':"", 'M':True, 'S':None}
		}
		self.helper = [(self.tag, [
			(ml_jcfg.N_("hostname"), ml_jcfg.JcDomainName()),
			(ml_jcfg.N_("domain-name"), ml_jcfg.JcDomainName()),
			(ml_jcfg.N_("dns-server-1"), ml_jcfg.JcIpv4(a=True)),
			(ml_jcfg.N_("dns-server-2"), ml_jcfg.JcIpv4(a=True))
		])]
	def do_set(self):
		""" real task """
		# hostname
		if self.cfg["hostname"] and self.cfg["hostname"] != "":
			try:
				f = open("/etc/hostname", "w")
				f.writelines(self.cfg["hostname"] + "\n")
				f.close()
			except Exception as e:
				return (False, [str(e)])
		# resolv.conf
		buf = "# Generated by middleware\n"
		if self.cfg.has_key("domain-name"):
			if self.cfg["domain-name"] and self.cfg["domain-name"] != "":
				buf += "domain " + self.cfg["domain-name"] + "\n"
				buf += "search " + self.cfg["domain-name"] + "\n"
		if self.cfg.has_key("dns-server-1"):
			if self.cfg["dns-server-1"] and self.cfg["dns-server-1"] != "":
				buf += "nameserver " + self.cfg["dns-server-1"] + "\n"
		if self.cfg.has_key("dns-server-2"):
			if self.cfg["dns-server-2"] and self.cfg["dns-server-2"] != "":
				buf += "nameserver " + self.cfg["dns-server-2"] + "\n"
		try:
			f = open("/etc/resolv.conf", "w")
			f.writelines(buf)
			f.close()
		except Exception as e:
			return (False, [str(e)])
		return (True, None)

def get(user = None, threadlock = None):
	"""
		Web UI calls get()
		return
			(True, dict)
			(False, list)
	"""
	try:
		obj = dns(threadlock = threadlock)
		return obj.get()
	except Exception as e:
		return (False, [str(e)])

def set(user = None, cfg = {}, threadlock = None):
	"""
		Web UI calls set()
		return
			(True, None)
			(False, list)
	"""
	try:
		obj = dns(threadlock = threadlock)
		return obj.set(cfg)
	except Exception as e:
		return (False, [str(e)])
